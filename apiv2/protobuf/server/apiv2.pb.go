// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: server/apiv2.proto

package protobuf

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UserSettingType int32

const (
	UserSettingType_PREFERRED_NAME         UserSettingType = 0
	UserSettingType_GREETING               UserSettingType = 1
	UserSettingType_CUSTOM_PLAYBACK_SPEEDS UserSettingType = 2
)

// Enum value maps for UserSettingType.
var (
	UserSettingType_name = map[int32]string{
		0: "PREFERRED_NAME",
		1: "GREETING",
		2: "CUSTOM_PLAYBACK_SPEEDS",
	}
	UserSettingType_value = map[string]int32{
		"PREFERRED_NAME":         0,
		"GREETING":               1,
		"CUSTOM_PLAYBACK_SPEEDS": 2,
	}
)

func (x UserSettingType) Enum() *UserSettingType {
	p := new(UserSettingType)
	*p = x
	return p
}

func (x UserSettingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserSettingType) Descriptor() protoreflect.EnumDescriptor {
	return file_server_apiv2_proto_enumTypes[0].Descriptor()
}

func (UserSettingType) Type() protoreflect.EnumType {
	return &file_server_apiv2_proto_enumTypes[0]
}

func (x UserSettingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserSettingType.Descriptor instead.
func (UserSettingType) EnumDescriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{0}
}

type NotificationTarget int32

const (
	NotificationTarget_TARGET_ALL      NotificationTarget = 0
	NotificationTarget_TARGET_USER     NotificationTarget = 1
	NotificationTarget_TARGET_STUDENT  NotificationTarget = 2
	NotificationTarget_TARGET_LECTURER NotificationTarget = 3
	NotificationTarget_TARGET_ADMIN    NotificationTarget = 4
)

// Enum value maps for NotificationTarget.
var (
	NotificationTarget_name = map[int32]string{
		0: "TARGET_ALL",
		1: "TARGET_USER",
		2: "TARGET_STUDENT",
		3: "TARGET_LECTURER",
		4: "TARGET_ADMIN",
	}
	NotificationTarget_value = map[string]int32{
		"TARGET_ALL":      0,
		"TARGET_USER":     1,
		"TARGET_STUDENT":  2,
		"TARGET_LECTURER": 3,
		"TARGET_ADMIN":    4,
	}
)

func (x NotificationTarget) Enum() *NotificationTarget {
	p := new(NotificationTarget)
	*p = x
	return p
}

func (x NotificationTarget) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NotificationTarget) Descriptor() protoreflect.EnumDescriptor {
	return file_server_apiv2_proto_enumTypes[1].Descriptor()
}

func (NotificationTarget) Type() protoreflect.EnumType {
	return &file_server_apiv2_proto_enumTypes[1]
}

func (x NotificationTarget) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NotificationTarget.Descriptor instead.
func (NotificationTarget) EnumDescriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{1}
}

type HealthCheckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        string                 `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HealthCheckResponse) Reset() {
	*x = HealthCheckResponse{}
	mi := &file_server_apiv2_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HealthCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HealthCheckResponse) ProtoMessage() {}

func (x *HealthCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HealthCheckResponse.ProtoReflect.Descriptor instead.
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{0}
}

func (x *HealthCheckResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type User struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Id                  uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	LastName            string                 `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Email               string                 `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	MatriculationNumber string                 `protobuf:"bytes,5,opt,name=matriculation_number,json=matriculationNumber,proto3" json:"matriculation_number,omitempty"`
	LrzId               string                 `protobuf:"bytes,6,opt,name=lrz_id,json=lrzId,proto3" json:"lrz_id,omitempty"`
	Role                uint32                 `protobuf:"varint,7,opt,name=role,proto3" json:"role,omitempty"`
	Courses             []*Course              `protobuf:"bytes,8,rep,name=courses,proto3" json:"courses,omitempty"`
	AdministeredCourses []*Course              `protobuf:"bytes,9,rep,name=administered_courses,json=administeredCourses,proto3" json:"administered_courses,omitempty"`
	PinnedCourses       []*Course              `protobuf:"bytes,10,rep,name=pinned_courses,json=pinnedCourses,proto3" json:"pinned_courses,omitempty"`
	Settings            []*UserSetting         `protobuf:"bytes,11,rep,name=settings,proto3" json:"settings,omitempty"`
	Bookmarks           []*Bookmark            `protobuf:"bytes,12,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	CreatedAt           *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_server_apiv2_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *User) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *User) GetMatriculationNumber() string {
	if x != nil {
		return x.MatriculationNumber
	}
	return ""
}

func (x *User) GetLrzId() string {
	if x != nil {
		return x.LrzId
	}
	return ""
}

func (x *User) GetRole() uint32 {
	if x != nil {
		return x.Role
	}
	return 0
}

func (x *User) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

func (x *User) GetAdministeredCourses() []*Course {
	if x != nil {
		return x.AdministeredCourses
	}
	return nil
}

func (x *User) GetPinnedCourses() []*Course {
	if x != nil {
		return x.PinnedCourses
	}
	return nil
}

func (x *User) GetSettings() []*UserSetting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *User) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

func (x *User) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UserSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          UserSettingType        `protobuf:"varint,3,opt,name=type,proto3,enum=protobuf.UserSettingType" json:"type,omitempty"`
	Value         string                 `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserSetting) Reset() {
	*x = UserSetting{}
	mi := &file_server_apiv2_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSetting) ProtoMessage() {}

func (x *UserSetting) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSetting.ProtoReflect.Descriptor instead.
func (*UserSetting) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{2}
}

func (x *UserSetting) GetType() UserSettingType {
	if x != nil {
		return x.Type
	}
	return UserSettingType_PREFERRED_NAME
}

func (x *UserSetting) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type UpdateUserSettingsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserSettings  []*UserSetting         `protobuf:"bytes,1,rep,name=user_settings,json=userSettings,proto3" json:"user_settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSettingsRequest) Reset() {
	*x = UpdateUserSettingsRequest{}
	mi := &file_server_apiv2_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSettingsRequest) ProtoMessage() {}

func (x *UpdateUserSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserSettingsRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateUserSettingsRequest) GetUserSettings() []*UserSetting {
	if x != nil {
		return x.UserSettings
	}
	return nil
}

type ResetPasswordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetPasswordRequest) Reset() {
	*x = ResetPasswordRequest{}
	mi := &file_server_apiv2_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetPasswordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordRequest) ProtoMessage() {}

func (x *ResetPasswordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordRequest.ProtoReflect.Descriptor instead.
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{4}
}

func (x *ResetPasswordRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type GetUserResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          *User                  `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserResponse) Reset() {
	*x = GetUserResponse{}
	mi := &file_server_apiv2_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserResponse) ProtoMessage() {}

func (x *GetUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserResponse.ProtoReflect.Descriptor instead.
func (*GetUserResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{5}
}

func (x *GetUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type UpdateUserSettingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserSettings  []*UserSetting         `protobuf:"bytes,1,rep,name=user_settings,json=userSettings,proto3" json:"user_settings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateUserSettingsResponse) Reset() {
	*x = UpdateUserSettingsResponse{}
	mi := &file_server_apiv2_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateUserSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserSettingsResponse) ProtoMessage() {}

func (x *UpdateUserSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserSettingsResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateUserSettingsResponse) GetUserSettings() []*UserSetting {
	if x != nil {
		return x.UserSettings
	}
	return nil
}

type ResetPasswordResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResetPasswordResponse) Reset() {
	*x = ResetPasswordResponse{}
	mi := &file_server_apiv2_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResetPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordResponse) ProtoMessage() {}

func (x *ResetPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordResponse.ProtoReflect.Descriptor instead.
func (*ResetPasswordResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{7}
}

func (x *ResetPasswordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ExportPersonalDataResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserData      *User                  `protobuf:"bytes,1,opt,name=user_data,json=userData,proto3" json:"user_data,omitempty"`
	Enrollments   []*Enrollment          `protobuf:"bytes,2,rep,name=enrollments,proto3" json:"enrollments,omitempty"`
	VideoViews    []*VideoView           `protobuf:"bytes,3,rep,name=video_views,json=videoViews,proto3" json:"video_views,omitempty"`
	Chats         []*Chat                `protobuf:"bytes,4,rep,name=chats,proto3" json:"chats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExportPersonalDataResponse) Reset() {
	*x = ExportPersonalDataResponse{}
	mi := &file_server_apiv2_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExportPersonalDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportPersonalDataResponse) ProtoMessage() {}

func (x *ExportPersonalDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportPersonalDataResponse.ProtoReflect.Descriptor instead.
func (*ExportPersonalDataResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{8}
}

func (x *ExportPersonalDataResponse) GetUserData() *User {
	if x != nil {
		return x.UserData
	}
	return nil
}

func (x *ExportPersonalDataResponse) GetEnrollments() []*Enrollment {
	if x != nil {
		return x.Enrollments
	}
	return nil
}

func (x *ExportPersonalDataResponse) GetVideoViews() []*VideoView {
	if x != nil {
		return x.VideoViews
	}
	return nil
}

func (x *ExportPersonalDataResponse) GetChats() []*Chat {
	if x != nil {
		return x.Chats
	}
	return nil
}

type Enrollment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          int32                  `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Term          string                 `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	Course        string                 `protobuf:"bytes,3,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Enrollment) Reset() {
	*x = Enrollment{}
	mi := &file_server_apiv2_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Enrollment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enrollment) ProtoMessage() {}

func (x *Enrollment) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enrollment.ProtoReflect.Descriptor instead.
func (*Enrollment) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{9}
}

func (x *Enrollment) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Enrollment) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

func (x *Enrollment) GetCourse() string {
	if x != nil {
		return x.Course
	}
	return ""
}

type VideoView struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	StreamId       uint32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Progress       float32                `protobuf:"fixed32,2,opt,name=progress,proto3" json:"progress,omitempty"`
	MarkedFinished bool                   `protobuf:"varint,3,opt,name=marked_finished,json=markedFinished,proto3" json:"marked_finished,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *VideoView) Reset() {
	*x = VideoView{}
	mi := &file_server_apiv2_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VideoView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VideoView) ProtoMessage() {}

func (x *VideoView) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VideoView.ProtoReflect.Descriptor instead.
func (*VideoView) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{10}
}

func (x *VideoView) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *VideoView) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *VideoView) GetMarkedFinished() bool {
	if x != nil {
		return x.MarkedFinished
	}
	return false
}

type Chat struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      uint32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Chat) Reset() {
	*x = Chat{}
	mi := &file_server_apiv2_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Chat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chat) ProtoMessage() {}

func (x *Chat) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chat.ProtoReflect.Descriptor instead.
func (*Chat) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{11}
}

func (x *Chat) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Chat) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Chat) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type Bookmark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Hours         uint32                 `protobuf:"varint,3,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes       uint32                 `protobuf:"varint,4,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds       uint32                 `protobuf:"varint,5,opt,name=seconds,proto3" json:"seconds,omitempty"`
	UserId        uint32                 `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	StreamId      uint32                 `protobuf:"varint,7,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Bookmark) Reset() {
	*x = Bookmark{}
	mi := &file_server_apiv2_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Bookmark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bookmark) ProtoMessage() {}

func (x *Bookmark) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bookmark.ProtoReflect.Descriptor instead.
func (*Bookmark) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{12}
}

func (x *Bookmark) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Bookmark) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Bookmark) GetHours() uint32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *Bookmark) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *Bookmark) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Bookmark) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Bookmark) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type GetBookmarksRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      uint32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBookmarksRequest) Reset() {
	*x = GetBookmarksRequest{}
	mi := &file_server_apiv2_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookmarksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookmarksRequest) ProtoMessage() {}

func (x *GetBookmarksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookmarksRequest.ProtoReflect.Descriptor instead.
func (*GetBookmarksRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{13}
}

func (x *GetBookmarksRequest) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

type AddBookmarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamId      uint32                 `protobuf:"varint,1,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Hours         uint32                 `protobuf:"varint,3,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes       uint32                 `protobuf:"varint,4,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds       uint32                 `protobuf:"varint,5,opt,name=seconds,proto3" json:"seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBookmarkRequest) Reset() {
	*x = AddBookmarkRequest{}
	mi := &file_server_apiv2_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBookmarkRequest) ProtoMessage() {}

func (x *AddBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBookmarkRequest.ProtoReflect.Descriptor instead.
func (*AddBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{14}
}

func (x *AddBookmarkRequest) GetStreamId() uint32 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *AddBookmarkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *AddBookmarkRequest) GetHours() uint32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *AddBookmarkRequest) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *AddBookmarkRequest) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type UpdateBookmarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Hours         uint32                 `protobuf:"varint,3,opt,name=hours,proto3" json:"hours,omitempty"`
	Minutes       uint32                 `protobuf:"varint,4,opt,name=minutes,proto3" json:"minutes,omitempty"`
	Seconds       uint32                 `protobuf:"varint,5,opt,name=seconds,proto3" json:"seconds,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBookmarkRequest) Reset() {
	*x = UpdateBookmarkRequest{}
	mi := &file_server_apiv2_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookmarkRequest) ProtoMessage() {}

func (x *UpdateBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookmarkRequest.ProtoReflect.Descriptor instead.
func (*UpdateBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateBookmarkRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateBookmarkRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UpdateBookmarkRequest) GetHours() uint32 {
	if x != nil {
		return x.Hours
	}
	return 0
}

func (x *UpdateBookmarkRequest) GetMinutes() uint32 {
	if x != nil {
		return x.Minutes
	}
	return 0
}

func (x *UpdateBookmarkRequest) GetSeconds() uint32 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type DeleteBookmarkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteBookmarkRequest) Reset() {
	*x = DeleteBookmarkRequest{}
	mi := &file_server_apiv2_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteBookmarkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBookmarkRequest) ProtoMessage() {}

func (x *DeleteBookmarkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBookmarkRequest.ProtoReflect.Descriptor instead.
func (*DeleteBookmarkRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{16}
}

func (x *DeleteBookmarkRequest) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetBookmarksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bookmarks     []*Bookmark            `protobuf:"bytes,1,rep,name=bookmarks,proto3" json:"bookmarks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBookmarksResponse) Reset() {
	*x = GetBookmarksResponse{}
	mi := &file_server_apiv2_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBookmarksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBookmarksResponse) ProtoMessage() {}

func (x *GetBookmarksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBookmarksResponse.ProtoReflect.Descriptor instead.
func (*GetBookmarksResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{17}
}

func (x *GetBookmarksResponse) GetBookmarks() []*Bookmark {
	if x != nil {
		return x.Bookmarks
	}
	return nil
}

type AddBookmarkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bookmark      *Bookmark              `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBookmarkResponse) Reset() {
	*x = AddBookmarkResponse{}
	mi := &file_server_apiv2_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBookmarkResponse) ProtoMessage() {}

func (x *AddBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBookmarkResponse.ProtoReflect.Descriptor instead.
func (*AddBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{18}
}

func (x *AddBookmarkResponse) GetBookmark() *Bookmark {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type UpdateBookmarkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Bookmark      *Bookmark              `protobuf:"bytes,1,opt,name=bookmark,proto3" json:"bookmark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateBookmarkResponse) Reset() {
	*x = UpdateBookmarkResponse{}
	mi := &file_server_apiv2_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateBookmarkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBookmarkResponse) ProtoMessage() {}

func (x *UpdateBookmarkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBookmarkResponse.ProtoReflect.Descriptor instead.
func (*UpdateBookmarkResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateBookmarkResponse) GetBookmark() *Bookmark {
	if x != nil {
		return x.Bookmark
	}
	return nil
}

type Course struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	Id                      uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                    string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slug                    string                 `protobuf:"bytes,3,opt,name=slug,proto3" json:"slug,omitempty"`
	Semester                *Semester              `protobuf:"bytes,4,opt,name=semester,proto3" json:"semester,omitempty"`
	TumOnlineIdentifier     string                 `protobuf:"bytes,5,opt,name=tum_online_identifier,json=tumOnlineIdentifier,proto3" json:"tum_online_identifier,omitempty"`
	VodEnabled              bool                   `protobuf:"varint,6,opt,name=vod_enabled,json=vodEnabled,proto3" json:"vod_enabled,omitempty"`
	DownloadsEnabled        bool                   `protobuf:"varint,7,opt,name=downloads_enabled,json=downloadsEnabled,proto3" json:"downloads_enabled,omitempty"`
	ChatEnabled             bool                   `protobuf:"varint,8,opt,name=chat_enabled,json=chatEnabled,proto3" json:"chat_enabled,omitempty"`
	AnonymousChatEnabled    bool                   `protobuf:"varint,9,opt,name=anonymous_chat_enabled,json=anonymousChatEnabled,proto3" json:"anonymous_chat_enabled,omitempty"`
	ModeratedChatEnabled    bool                   `protobuf:"varint,10,opt,name=moderated_chat_enabled,json=moderatedChatEnabled,proto3" json:"moderated_chat_enabled,omitempty"`
	VodChatEnabled          bool                   `protobuf:"varint,11,opt,name=vod_chat_enabled,json=vodChatEnabled,proto3" json:"vod_chat_enabled,omitempty"`
	Streams                 []*Stream              `protobuf:"bytes,12,rep,name=streams,proto3" json:"streams,omitempty"`
	CameraPresetPreferences string                 `protobuf:"bytes,13,opt,name=camera_preset_preferences,json=cameraPresetPreferences,proto3" json:"camera_preset_preferences,omitempty"`
	SourcePreferences       string                 `protobuf:"bytes,14,opt,name=source_preferences,json=sourcePreferences,proto3" json:"source_preferences,omitempty"`
	LastRecordingId         uint32                 `protobuf:"varint,15,opt,name=last_recording_id,json=lastRecordingId,proto3" json:"last_recording_id,omitempty"`
	NextLectureId           uint32                 `protobuf:"varint,16,opt,name=next_lecture_id,json=nextLectureId,proto3" json:"next_lecture_id,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Course) Reset() {
	*x = Course{}
	mi := &file_server_apiv2_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Course) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Course) ProtoMessage() {}

func (x *Course) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Course.ProtoReflect.Descriptor instead.
func (*Course) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{20}
}

func (x *Course) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Course) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Course) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Course) GetSemester() *Semester {
	if x != nil {
		return x.Semester
	}
	return nil
}

func (x *Course) GetTumOnlineIdentifier() string {
	if x != nil {
		return x.TumOnlineIdentifier
	}
	return ""
}

func (x *Course) GetVodEnabled() bool {
	if x != nil {
		return x.VodEnabled
	}
	return false
}

func (x *Course) GetDownloadsEnabled() bool {
	if x != nil {
		return x.DownloadsEnabled
	}
	return false
}

func (x *Course) GetChatEnabled() bool {
	if x != nil {
		return x.ChatEnabled
	}
	return false
}

func (x *Course) GetAnonymousChatEnabled() bool {
	if x != nil {
		return x.AnonymousChatEnabled
	}
	return false
}

func (x *Course) GetModeratedChatEnabled() bool {
	if x != nil {
		return x.ModeratedChatEnabled
	}
	return false
}

func (x *Course) GetVodChatEnabled() bool {
	if x != nil {
		return x.VodChatEnabled
	}
	return false
}

func (x *Course) GetStreams() []*Stream {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *Course) GetCameraPresetPreferences() string {
	if x != nil {
		return x.CameraPresetPreferences
	}
	return ""
}

func (x *Course) GetSourcePreferences() string {
	if x != nil {
		return x.SourcePreferences
	}
	return ""
}

func (x *Course) GetLastRecordingId() uint32 {
	if x != nil {
		return x.LastRecordingId
	}
	return 0
}

func (x *Course) GetNextLectureId() uint32 {
	if x != nil {
		return x.NextLectureId
	}
	return 0
}

type GetPublicCoursesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          uint32                 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Term          string                 `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicCoursesRequest) Reset() {
	*x = GetPublicCoursesRequest{}
	mi := &file_server_apiv2_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicCoursesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicCoursesRequest) ProtoMessage() {}

func (x *GetPublicCoursesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicCoursesRequest.ProtoReflect.Descriptor instead.
func (*GetPublicCoursesRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{21}
}

func (x *GetPublicCoursesRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetPublicCoursesRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type GetCourseBySlugRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slug          string                 `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Year          uint32                 `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	Term          string                 `protobuf:"bytes,3,opt,name=term,proto3" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseBySlugRequest) Reset() {
	*x = GetCourseBySlugRequest{}
	mi := &file_server_apiv2_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseBySlugRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseBySlugRequest) ProtoMessage() {}

func (x *GetCourseBySlugRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseBySlugRequest.ProtoReflect.Descriptor instead.
func (*GetCourseBySlugRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{22}
}

func (x *GetCourseBySlugRequest) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *GetCourseBySlugRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetCourseBySlugRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type GetUserCoursesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Year          uint32                 `protobuf:"varint,1,opt,name=year,proto3" json:"year,omitempty"`
	Term          string                 `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCoursesRequest) Reset() {
	*x = GetUserCoursesRequest{}
	mi := &file_server_apiv2_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCoursesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoursesRequest) ProtoMessage() {}

func (x *GetUserCoursesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoursesRequest.ProtoReflect.Descriptor instead.
func (*GetUserCoursesRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{23}
}

func (x *GetUserCoursesRequest) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *GetUserCoursesRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type GetPinForCourseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseId      uint32                 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPinForCourseRequest) Reset() {
	*x = GetPinForCourseRequest{}
	mi := &file_server_apiv2_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPinForCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPinForCourseRequest) ProtoMessage() {}

func (x *GetPinForCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPinForCourseRequest.ProtoReflect.Descriptor instead.
func (*GetPinForCourseRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{24}
}

func (x *GetPinForCourseRequest) GetCourseId() uint32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

type PinCourseRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CourseId      uint32                 `protobuf:"varint,1,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Pin           bool                   `protobuf:"varint,2,opt,name=pin,proto3" json:"pin,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinCourseRequest) Reset() {
	*x = PinCourseRequest{}
	mi := &file_server_apiv2_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinCourseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinCourseRequest) ProtoMessage() {}

func (x *PinCourseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinCourseRequest.ProtoReflect.Descriptor instead.
func (*PinCourseRequest) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{25}
}

func (x *PinCourseRequest) GetCourseId() uint32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *PinCourseRequest) GetPin() bool {
	if x != nil {
		return x.Pin
	}
	return false
}

type GetLiveStreamsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Streams       []*CourseStream        `protobuf:"bytes,1,rep,name=streams,proto3" json:"streams,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLiveStreamsResponse) Reset() {
	*x = GetLiveStreamsResponse{}
	mi := &file_server_apiv2_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLiveStreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLiveStreamsResponse) ProtoMessage() {}

func (x *GetLiveStreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLiveStreamsResponse.ProtoReflect.Descriptor instead.
func (*GetLiveStreamsResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{26}
}

func (x *GetLiveStreamsResponse) GetStreams() []*CourseStream {
	if x != nil {
		return x.Streams
	}
	return nil
}

type GetPublicCoursesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Courses       []*Course              `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPublicCoursesResponse) Reset() {
	*x = GetPublicCoursesResponse{}
	mi := &file_server_apiv2_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPublicCoursesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPublicCoursesResponse) ProtoMessage() {}

func (x *GetPublicCoursesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPublicCoursesResponse.ProtoReflect.Descriptor instead.
func (*GetPublicCoursesResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{27}
}

func (x *GetPublicCoursesResponse) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

type GetCourseBySlugResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Course        *Course                `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCourseBySlugResponse) Reset() {
	*x = GetCourseBySlugResponse{}
	mi := &file_server_apiv2_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCourseBySlugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCourseBySlugResponse) ProtoMessage() {}

func (x *GetCourseBySlugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCourseBySlugResponse.ProtoReflect.Descriptor instead.
func (*GetCourseBySlugResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{28}
}

func (x *GetCourseBySlugResponse) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

type GetUserCoursesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Courses       []*Course              `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCoursesResponse) Reset() {
	*x = GetUserCoursesResponse{}
	mi := &file_server_apiv2_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCoursesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCoursesResponse) ProtoMessage() {}

func (x *GetUserCoursesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCoursesResponse.ProtoReflect.Descriptor instead.
func (*GetUserCoursesResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{29}
}

func (x *GetUserCoursesResponse) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

type GetPinnedCoursesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Courses       []*Course              `protobuf:"bytes,1,rep,name=courses,proto3" json:"courses,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPinnedCoursesResponse) Reset() {
	*x = GetPinnedCoursesResponse{}
	mi := &file_server_apiv2_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPinnedCoursesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPinnedCoursesResponse) ProtoMessage() {}

func (x *GetPinnedCoursesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPinnedCoursesResponse.ProtoReflect.Descriptor instead.
func (*GetPinnedCoursesResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{30}
}

func (x *GetPinnedCoursesResponse) GetCourses() []*Course {
	if x != nil {
		return x.Courses
	}
	return nil
}

type PinCourseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       string                 `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PinCourseResponse) Reset() {
	*x = PinCourseResponse{}
	mi := &file_server_apiv2_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PinCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PinCourseResponse) ProtoMessage() {}

func (x *PinCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PinCourseResponse.ProtoReflect.Descriptor instead.
func (*PinCourseResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{31}
}

func (x *PinCourseResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetPinForCourseResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Has           bool                   `protobuf:"varint,1,opt,name=has,proto3" json:"has,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPinForCourseResponse) Reset() {
	*x = GetPinForCourseResponse{}
	mi := &file_server_apiv2_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPinForCourseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPinForCourseResponse) ProtoMessage() {}

func (x *GetPinForCourseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPinForCourseResponse.ProtoReflect.Descriptor instead.
func (*GetPinForCourseResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{32}
}

func (x *GetPinForCourseResponse) GetHas() bool {
	if x != nil {
		return x.Has
	}
	return false
}

type CourseStream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Course        *Course                `protobuf:"bytes,1,opt,name=course,proto3" json:"course,omitempty"`
	Stream        *Stream                `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	LectureHall   *LectureHall           `protobuf:"bytes,3,opt,name=lecture_hall,json=lectureHall,proto3" json:"lecture_hall,omitempty"`
	Viewers       uint32                 `protobuf:"varint,4,opt,name=viewers,proto3" json:"viewers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CourseStream) Reset() {
	*x = CourseStream{}
	mi := &file_server_apiv2_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CourseStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CourseStream) ProtoMessage() {}

func (x *CourseStream) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CourseStream.ProtoReflect.Descriptor instead.
func (*CourseStream) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{33}
}

func (x *CourseStream) GetCourse() *Course {
	if x != nil {
		return x.Course
	}
	return nil
}

func (x *CourseStream) GetStream() *Stream {
	if x != nil {
		return x.Stream
	}
	return nil
}

func (x *CourseStream) GetLectureHall() *LectureHall {
	if x != nil {
		return x.LectureHall
	}
	return nil
}

func (x *CourseStream) GetViewers() uint32 {
	if x != nil {
		return x.Viewers
	}
	return 0
}

type Semester struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TeachingTerm  string                 `protobuf:"bytes,1,opt,name=teaching_term,json=teachingTerm,proto3" json:"teaching_term,omitempty"`
	Year          uint32                 `protobuf:"varint,2,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Semester) Reset() {
	*x = Semester{}
	mi := &file_server_apiv2_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Semester) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Semester) ProtoMessage() {}

func (x *Semester) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Semester.ProtoReflect.Descriptor instead.
func (*Semester) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{34}
}

func (x *Semester) GetTeachingTerm() string {
	if x != nil {
		return x.TeachingTerm
	}
	return ""
}

func (x *Semester) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type GetSemestersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Current       *Semester              `protobuf:"bytes,1,opt,name=current,proto3" json:"current,omitempty"`
	Semesters     []*Semester            `protobuf:"bytes,2,rep,name=semesters,proto3" json:"semesters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSemestersResponse) Reset() {
	*x = GetSemestersResponse{}
	mi := &file_server_apiv2_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSemestersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSemestersResponse) ProtoMessage() {}

func (x *GetSemestersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSemestersResponse.ProtoReflect.Descriptor instead.
func (*GetSemestersResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{35}
}

func (x *GetSemestersResponse) GetCurrent() *Semester {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *GetSemestersResponse) GetSemesters() []*Semester {
	if x != nil {
		return x.Semesters
	}
	return nil
}

type Stream struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	CourseId         uint32                 `protobuf:"varint,4,opt,name=course_id,json=courseId,proto3" json:"course_id,omitempty"`
	Start            *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	End              *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	ChatEnabled      bool                   `protobuf:"varint,7,opt,name=chat_enabled,json=chatEnabled,proto3" json:"chat_enabled,omitempty"`
	RoomName         string                 `protobuf:"bytes,8,opt,name=room_name,json=roomName,proto3" json:"room_name,omitempty"`
	RoomCode         string                 `protobuf:"bytes,9,opt,name=room_code,json=roomCode,proto3" json:"room_code,omitempty"`
	EventTypeName    string                 `protobuf:"bytes,10,opt,name=event_type_name,json=eventTypeName,proto3" json:"event_type_name,omitempty"`
	TumOnlineEventId uint32                 `protobuf:"varint,11,opt,name=tum_online_event_id,json=tumOnlineEventId,proto3" json:"tum_online_event_id,omitempty"`
	SeriesIdentifier string                 `protobuf:"bytes,12,opt,name=series_identifier,json=seriesIdentifier,proto3" json:"series_identifier,omitempty"`
	PlaylistUrl      string                 `protobuf:"bytes,13,opt,name=playlist_url,json=playlistUrl,proto3" json:"playlist_url,omitempty"`
	PlaylistUrlPres  string                 `protobuf:"bytes,14,opt,name=playlist_url_pres,json=playlistUrlPres,proto3" json:"playlist_url_pres,omitempty"`
	PlaylistUrlCam   string                 `protobuf:"bytes,15,opt,name=playlist_url_cam,json=playlistUrlCam,proto3" json:"playlist_url_cam,omitempty"`
	LiveNow          bool                   `protobuf:"varint,16,opt,name=liveNow,proto3" json:"liveNow,omitempty"`
	LiveNowTimestamp *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=live_now_timestamp,json=liveNowTimestamp,proto3" json:"live_now_timestamp,omitempty"`
	Recording        bool                   `protobuf:"varint,18,opt,name=recording,proto3" json:"recording,omitempty"`
	Premiere         bool                   `protobuf:"varint,19,opt,name=premiere,proto3" json:"premiere,omitempty"`
	Ended            bool                   `protobuf:"varint,20,opt,name=ended,proto3" json:"ended,omitempty"`
	VodViews         uint32                 `protobuf:"varint,21,opt,name=vod_views,json=vodViews,proto3" json:"vod_views,omitempty"`
	StartOffset      uint32                 `protobuf:"varint,22,opt,name=start_offset,json=startOffset,proto3" json:"start_offset,omitempty"`
	EndOffset        uint32                 `protobuf:"varint,23,opt,name=end_offset,json=endOffset,proto3" json:"end_offset,omitempty"`
	Duration         uint32                 `protobuf:"varint,28,opt,name=duration,proto3" json:"duration,omitempty"`
	Downloads        []*Download            `protobuf:"bytes,29,rep,name=downloads,proto3" json:"downloads,omitempty"`
	IsPlanned        bool                   `protobuf:"varint,30,opt,name=is_planned,json=isPlanned,proto3" json:"is_planned,omitempty"`
	IsComingUp       bool                   `protobuf:"varint,31,opt,name=is_coming_up,json=isComingUp,proto3" json:"is_coming_up,omitempty"`
	HlsUrl           string                 `protobuf:"bytes,32,opt,name=hls_url,json=hlsUrl,proto3" json:"hls_url,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_server_apiv2_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{36}
}

func (x *Stream) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Stream) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stream) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Stream) GetCourseId() uint32 {
	if x != nil {
		return x.CourseId
	}
	return 0
}

func (x *Stream) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *Stream) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

func (x *Stream) GetChatEnabled() bool {
	if x != nil {
		return x.ChatEnabled
	}
	return false
}

func (x *Stream) GetRoomName() string {
	if x != nil {
		return x.RoomName
	}
	return ""
}

func (x *Stream) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *Stream) GetEventTypeName() string {
	if x != nil {
		return x.EventTypeName
	}
	return ""
}

func (x *Stream) GetTumOnlineEventId() uint32 {
	if x != nil {
		return x.TumOnlineEventId
	}
	return 0
}

func (x *Stream) GetSeriesIdentifier() string {
	if x != nil {
		return x.SeriesIdentifier
	}
	return ""
}

func (x *Stream) GetPlaylistUrl() string {
	if x != nil {
		return x.PlaylistUrl
	}
	return ""
}

func (x *Stream) GetPlaylistUrlPres() string {
	if x != nil {
		return x.PlaylistUrlPres
	}
	return ""
}

func (x *Stream) GetPlaylistUrlCam() string {
	if x != nil {
		return x.PlaylistUrlCam
	}
	return ""
}

func (x *Stream) GetLiveNow() bool {
	if x != nil {
		return x.LiveNow
	}
	return false
}

func (x *Stream) GetLiveNowTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LiveNowTimestamp
	}
	return nil
}

func (x *Stream) GetRecording() bool {
	if x != nil {
		return x.Recording
	}
	return false
}

func (x *Stream) GetPremiere() bool {
	if x != nil {
		return x.Premiere
	}
	return false
}

func (x *Stream) GetEnded() bool {
	if x != nil {
		return x.Ended
	}
	return false
}

func (x *Stream) GetVodViews() uint32 {
	if x != nil {
		return x.VodViews
	}
	return 0
}

func (x *Stream) GetStartOffset() uint32 {
	if x != nil {
		return x.StartOffset
	}
	return 0
}

func (x *Stream) GetEndOffset() uint32 {
	if x != nil {
		return x.EndOffset
	}
	return 0
}

func (x *Stream) GetDuration() uint32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Stream) GetDownloads() []*Download {
	if x != nil {
		return x.Downloads
	}
	return nil
}

func (x *Stream) GetIsPlanned() bool {
	if x != nil {
		return x.IsPlanned
	}
	return false
}

func (x *Stream) GetIsComingUp() bool {
	if x != nil {
		return x.IsComingUp
	}
	return false
}

func (x *Stream) GetHlsUrl() string {
	if x != nil {
		return x.HlsUrl
	}
	return ""
}

type Download struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FriendlyName  string                 `protobuf:"bytes,1,opt,name=friendly_name,json=friendlyName,proto3" json:"friendly_name,omitempty"`
	DownloadUrl   string                 `protobuf:"bytes,2,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Download) Reset() {
	*x = Download{}
	mi := &file_server_apiv2_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Download) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Download) ProtoMessage() {}

func (x *Download) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Download.ProtoReflect.Descriptor instead.
func (*Download) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{37}
}

func (x *Download) GetFriendlyName() string {
	if x != nil {
		return x.FriendlyName
	}
	return ""
}

func (x *Download) GetDownloadUrl() string {
	if x != nil {
		return x.DownloadUrl
	}
	return ""
}

type Notification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Title         string                 `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Body          string                 `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Target        NotificationTarget     `protobuf:"varint,3,opt,name=target,proto3,enum=protobuf.NotificationTarget" json:"target,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Notification) Reset() {
	*x = Notification{}
	mi := &file_server_apiv2_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Notification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notification) ProtoMessage() {}

func (x *Notification) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notification.ProtoReflect.Descriptor instead.
func (*Notification) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{38}
}

func (x *Notification) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Notification) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *Notification) GetTarget() NotificationTarget {
	if x != nil {
		return x.Target
	}
	return NotificationTarget_TARGET_ALL
}

func (x *Notification) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type ServerNotification struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Warn          bool                   `protobuf:"varint,2,opt,name=warn,proto3" json:"warn,omitempty"`
	Start         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	Expires       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires,proto3" json:"expires,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServerNotification) Reset() {
	*x = ServerNotification{}
	mi := &file_server_apiv2_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNotification) ProtoMessage() {}

func (x *ServerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNotification.ProtoReflect.Descriptor instead.
func (*ServerNotification) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{39}
}

func (x *ServerNotification) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ServerNotification) GetWarn() bool {
	if x != nil {
		return x.Warn
	}
	return false
}

func (x *ServerNotification) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *ServerNotification) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

type GetNotificationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Notifications []*Notification        `protobuf:"bytes,1,rep,name=notifications,proto3" json:"notifications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetNotificationsResponse) Reset() {
	*x = GetNotificationsResponse{}
	mi := &file_server_apiv2_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNotificationsResponse) ProtoMessage() {}

func (x *GetNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNotificationsResponse.ProtoReflect.Descriptor instead.
func (*GetNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{40}
}

func (x *GetNotificationsResponse) GetNotifications() []*Notification {
	if x != nil {
		return x.Notifications
	}
	return nil
}

type GetServerNotificationsResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ServerNotifications []*ServerNotification  `protobuf:"bytes,1,rep,name=server_notifications,json=serverNotifications,proto3" json:"server_notifications,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GetServerNotificationsResponse) Reset() {
	*x = GetServerNotificationsResponse{}
	mi := &file_server_apiv2_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetServerNotificationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServerNotificationsResponse) ProtoMessage() {}

func (x *GetServerNotificationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServerNotificationsResponse.ProtoReflect.Descriptor instead.
func (*GetServerNotificationsResponse) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{41}
}

func (x *GetServerNotificationsResponse) GetServerNotifications() []*ServerNotification {
	if x != nil {
		return x.ServerNotifications
	}
	return nil
}

type LectureHall struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	CameraPresets []*CameraPreset        `protobuf:"bytes,3,rep,name=camera_presets,json=cameraPresets,proto3" json:"camera_presets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LectureHall) Reset() {
	*x = LectureHall{}
	mi := &file_server_apiv2_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LectureHall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LectureHall) ProtoMessage() {}

func (x *LectureHall) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LectureHall.ProtoReflect.Descriptor instead.
func (*LectureHall) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{42}
}

func (x *LectureHall) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LectureHall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LectureHall) GetCameraPresets() []*CameraPreset {
	if x != nil {
		return x.CameraPresets
	}
	return nil
}

type CameraPreset struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CameraPreset) Reset() {
	*x = CameraPreset{}
	mi := &file_server_apiv2_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CameraPreset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CameraPreset) ProtoMessage() {}

func (x *CameraPreset) ProtoReflect() protoreflect.Message {
	mi := &file_server_apiv2_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CameraPreset.ProtoReflect.Descriptor instead.
func (*CameraPreset) Descriptor() ([]byte, []int) {
	return file_server_apiv2_proto_rawDescGZIP(), []int{43}
}

func (x *CameraPreset) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CameraPreset) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CameraPreset) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_server_apiv2_proto protoreflect.FileDescriptor

var file_server_apiv2_proto_rawDesc = []byte{
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32,
	0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x13, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x85, 0x04, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x14, 0x6d, 0x61, 0x74,
	0x72, 0x69, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6d, 0x61, 0x74, 0x72, 0x69, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06,
	0x6c, 0x72, 0x7a, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x72,
	0x7a, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x14, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x13, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0e, 0x70, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x0d, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x52, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x2d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2c,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x35, 0x0a, 0x0f,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x22, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x22, 0x58, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x0c, 0x75, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x31, 0x0a,
	0x15, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xdd, 0x01, 0x0a, 0x1a, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x0b,
	0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0a,
	0x76, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x05, 0x63, 0x68, 0x61, 0x74, 0x73,
	0x22, 0x4c, 0x0a, 0x0a, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x6d,
	0x0a, 0x09, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x22, 0x78, 0x0a,
	0x04, 0x43, 0x68, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x9d, 0x01, 0x0a, 0x12, 0x41,
	0x64, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d,
	0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x22, 0x45, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x22, 0x48, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x22, 0x96, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x65, 0x6d, 0x65, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52, 0x08, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x15, 0x74, 0x75, 0x6d, 0x5f, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x74, 0x75, 0x6d, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x76,
	0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x76, 0x6f, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61,
	0x64, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x61, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x61, 0x6e,
	0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x6d, 0x6f, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x6f, 0x64, 0x5f,
	0x63, 0x68, 0x61, 0x74, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x76, 0x6f, 0x64, 0x43, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x0c, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x3a,
	0x0a, 0x19, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x17, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x6c, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6e, 0x65, 0x78, 0x74, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x49, 0x64, 0x22, 0x41, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x22, 0x54, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x53,
	0x6c, 0x75, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x3f, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79,
	0x65, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x22, 0x35, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x22, 0x41,
	0x0a, 0x10, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x70, 0x69,
	0x6e, 0x22, 0x4a, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x22, 0x46, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x22, 0x44, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x22, 0x46, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x50, 0x69, 0x6e, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x2b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x68, 0x61, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x0c, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x28, 0x0a, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x06, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12,
	0x28, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x06, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x38, 0x0a, 0x0c, 0x6c, 0x65, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x68, 0x61, 0x6c, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x65, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x48, 0x61, 0x6c, 0x6c, 0x52, 0x0b, 0x6c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48,
	0x61, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x65, 0x72, 0x73, 0x22, 0x43, 0x0a,
	0x08, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x65, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x74, 0x65, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x72, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x22, 0x76, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x65, 0x6d, 0x65,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x52,
	0x09, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0xe0, 0x07, 0x0a, 0x06, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x74,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x6f, 0x6f, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x13, 0x74, 0x75, 0x6d, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x75, 0x6d, 0x4f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x11,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6c, 0x61,
	0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11,
	0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73,
	0x74, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x79,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x5f, 0x63, 0x61, 0x6d, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x79, 0x6c, 0x69, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x43,
	0x61, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x48, 0x0a, 0x12,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x77, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x70, 0x72, 0x65, 0x6d, 0x69, 0x65, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x6f, 0x64, 0x5f, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x76, 0x6f, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x09, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x6e, 0x65,
	0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x6c, 0x61, 0x6e, 0x6e,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x5f,
	0x75, 0x70, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x6f, 0x6d, 0x69,
	0x6e, 0x67, 0x55, 0x70, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x6c, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x6c, 0x73, 0x55, 0x72, 0x6c, 0x22, 0x52, 0x0a,
	0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72,
	0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x0c, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x34, 0x0a, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa4, 0x01,
	0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x12, 0x30, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x34,
	0x0a, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x22, 0x58, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x71,
	0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4f, 0x0a, 0x14, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x70, 0x0a, 0x0b, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x48, 0x61, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x52, 0x0d, 0x63, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x73, 0x22, 0x54, 0x0a, 0x0c, 0x43, 0x61, 0x6d, 0x65, 0x72, 0x61, 0x50, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x4f, 0x0a, 0x0f, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e,
	0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52, 0x45, 0x44, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x52, 0x45, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x59, 0x42, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x50, 0x45, 0x45, 0x44, 0x53, 0x10, 0x02, 0x2a, 0x70, 0x0a, 0x12, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x55, 0x44,
	0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f,
	0x4c, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x52, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x41,
	0x52, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x04, 0x32, 0xf6, 0x1b, 0x0a,
	0x03, 0x41, 0x50, 0x49, 0x12, 0xce, 0x01, 0x0a, 0x0b, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x87, 0x01, 0x92, 0x41,
	0x75, 0x0a, 0x0a, 0x41, 0x50, 0x49, 0x20, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x41,
	0x50, 0x49, 0x20, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x20, 0x2e,
	0x1a, 0x54, 0x49, 0x66, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x20, 0x32, 0x30, 0x30, 0x2c, 0x20, 0x74, 0x68, 0x65, 0x20, 0x41, 0x50, 0x49, 0x20,
	0x69, 0x73, 0x20, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x20,
	0x61, 0x20, 0x63, 0x61, 0x74, 0x61, 0x73, 0x74, 0x72, 0x6f, 0x70, 0x68, 0x69, 0x63, 0x20, 0x6f,
	0x75, 0x74, 0x61, 0x67, 0x65, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x09, 0x12, 0x07, 0x2f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x80, 0x01, 0x0a, 0x07, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x42, 0x92, 0x41, 0x2e, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x09, 0x47, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x1a, 0x1b, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x6d, 0x65, 0x12, 0xac, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x92, 0x41, 0x37,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x1a, 0x19, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x22, 0x15, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x2d, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0xd2, 0x01, 0x0a, 0x12, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x23,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x71, 0x92, 0x41, 0x51, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65,
	0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x1a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x3a, 0x01, 0x2a, 0x62, 0x01, 0x2a, 0x32, 0x0f, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x73, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0xa7, 0x01, 0x0a,
	0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x53, 0x92, 0x41, 0x3b, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x11, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x1a,
	0x20, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2f,
	0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x0c, 0x67, 0x65, 0x74, 0x53, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x77, 0x92, 0x41, 0x62, 0x0a, 0x09, 0x53, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x18, 0x47, 0x65, 0x74, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2e, 0x1a, 0x3b, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x20, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x20, 0x61, 0x6e, 0x64,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x6d,
	0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x73,
	0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0xd1, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74,
	0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x84, 0x01, 0x92, 0x41, 0x6c, 0x0a, 0x07, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x73, 0x12, 0x27, 0x47, 0x65, 0x74, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x6c, 0x79, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x1a, 0x38, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x6c, 0x79, 0x20, 0x6c, 0x69, 0x76, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x74, 0x68, 0x65, 0x69, 0x72, 0x20, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x2f, 0x6c, 0x69, 0x76, 0x65, 0x12, 0xc0, 0x01, 0x0a,
	0x10, 0x67, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x12, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0x92, 0x41, 0x52, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x1a, 0x32, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20,
	0x67, 0x69, 0x76, 0x65, 0x6e, 0x20, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12,
	0xc1, 0x01, 0x0a, 0x0f, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x42, 0x79, 0x53, 0x6c, 0x75, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x92, 0x41, 0x4f, 0x0a, 0x07, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x20, 0x62, 0x79, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x2e, 0x1a, 0x2f, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20,
	0x62, 0x79, 0x20, 0x69, 0x74, 0x73, 0x20, 0x73, 0x6c, 0x75, 0x67, 0x2c, 0x20, 0x79, 0x65, 0x61,
	0x72, 0x2c, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x74, 0x65, 0x72, 0x6d, 0x2e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x6c,
	0x75, 0x67, 0x7d, 0x12, 0xce, 0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x79, 0x92, 0x41, 0x5d, 0x0a, 0x07,
	0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x11, 0x47, 0x65, 0x74, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x1a, 0x3f, 0x52, 0x65, 0x74, 0x72,
	0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x64, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61,
	0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x67, 0x69, 0x76, 0x65,
	0x6e, 0x20, 0x73, 0x65, 0x6d, 0x65, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x12, 0x11, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x64, 0x12, 0xb2, 0x01, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x6e,
	0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x62, 0x92, 0x41, 0x48, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x73, 0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x20,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2e, 0x1a, 0x28, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x20, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x73, 0x2f, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0xc4, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x46,
	0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x69,
	0x6e, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x6c, 0x92, 0x41, 0x49, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x12, 0x13, 0x47, 0x65, 0x74, 0x20, 0x70, 0x69, 0x6e, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x2e, 0x1a, 0x29, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x69, 0x66,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x68, 0x61, 0x73, 0x20, 0x70, 0x69,
	0x6e, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73,
	0x2f, 0x7b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x7d, 0x2f, 0x70, 0x69, 0x6e,
	0x12, 0xb4, 0x01, 0x0a, 0x09, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x1a,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x6e, 0x92, 0x41, 0x48, 0x0a, 0x07, 0x43, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x73, 0x12, 0x16, 0x50, 0x69, 0x6e, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e,
	0x70, 0x69, 0x6e, 0x20, 0x61, 0x20, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x2e, 0x1a, 0x25, 0x50,
	0x69, 0x6e, 0x73, 0x20, 0x6f, 0x72, 0x20, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x73, 0x20, 0x61, 0x20,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75,
	0x73, 0x65, 0x72, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x73, 0x2f, 0x7b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x7d, 0x2f, 0x70, 0x69, 0x6e, 0x12, 0x9a, 0x01, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x64, 0x64, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4e, 0x92, 0x41, 0x32, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x0f, 0x41, 0x64, 0x64, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x1a, 0x14, 0x41, 0x64, 0x64, 0x73, 0x20, 0x61, 0x20, 0x6e, 0x65,
	0x77, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x13, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0xb6, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x92, 0x41, 0x4b, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x73, 0x12, 0x1b, 0x47, 0x65, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x20, 0x62, 0x79, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x49, 0x44,
	0x2e, 0x1a, 0x21, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x20, 0x62, 0x79, 0x20, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x20, 0x49, 0x44, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12, 0xb4, 0x01,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x5f, 0x92, 0x41, 0x3e, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61,
	0x72, 0x6b, 0x73, 0x12, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x62, 0x6f,
	0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x1a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73,
	0x20, 0x61, 0x6e, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x62, 0x6f, 0x6f,
	0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x1a, 0x16, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x2f,
	0x7b, 0x69, 0x64, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x55, 0x92, 0x41, 0x34, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x73,
	0x12, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x20, 0x61, 0x20, 0x62, 0x6f, 0x6f, 0x6b, 0x6d,
	0x61, 0x72, 0x6b, 0x2e, 0x1a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20,
	0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x2a,
	0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72,
	0x6b, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0xc2, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x72, 0x92, 0x41, 0x52, 0x0a, 0x0d, 0x4e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x47, 0x65,
	0x74, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x1a, 0x2d, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2f, 0x6e,
	0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xd6, 0x01, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x28, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x7a, 0x92, 0x41, 0x53, 0x0a, 0x0d,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x47,
	0x65, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x1a, 0x27, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x73, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2d, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xae, 0x03, 0x92, 0x41, 0x98, 0x03, 0x12, 0xd4, 0x02, 0x0a,
	0x0a, 0x67, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x20, 0x41, 0x50, 0x49, 0x12, 0xc6, 0x01, 0x54, 0x68,
	0x65, 0x20, 0x73, 0x68, 0x69, 0x6e, 0x79, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x67, 0x6f, 0x63, 0x61,
	0x73, 0x74, 0x20, 0x41, 0x50, 0x49, 0x21, 0x0a, 0x54, 0x68, 0x69, 0x73, 0x20, 0x41, 0x50, 0x49,
	0x20, 0x69, 0x73, 0x20, 0x64, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
	0x62, 0x65, 0x20, 0x61, 0x20, 0x75, 0x73, 0x65, 0x72, 0x2d, 0x66, 0x72, 0x69, 0x65, 0x6e, 0x64,
	0x6c, 0x79, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x65, 0x61, 0x73, 0x79, 0x2d, 0x74, 0x6f, 0x2d, 0x75,
	0x73, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x69, 0x72, 0x64, 0x20, 0x70, 0x61, 0x72, 0x74, 0x79, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x0a, 0x49, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x73, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x6c, 0x6c,
	0x20, 0x6e, 0x6f, 0x6e, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x47, 0x6f, 0x43, 0x61, 0x73, 0x74, 0x20, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x2e, 0x22, 0x3c, 0x0a, 0x17, 0x54, 0x55, 0x4d, 0x2d, 0x44, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x65, 0x72, 0x73, 0x20, 0x2d, 0x20, 0x67, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x12,
	0x21, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x55, 0x4d, 0x2d, 0x44, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x63, 0x61,
	0x73, 0x74, 0x2a, 0x3a, 0x0a, 0x03, 0x4d, 0x49, 0x54, 0x12, 0x33, 0x68, 0x74, 0x74, 0x70, 0x73,
	0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x55,
	0x4d, 0x2d, 0x44, 0x65, 0x76, 0x2f, 0x67, 0x6f, 0x63, 0x61, 0x73, 0x74, 0x2f, 0x62, 0x6c, 0x6f,
	0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x32, 0x03,
	0x32, 0x2e, 0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x38,
	0x30, 0x38, 0x31, 0x22, 0x07, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x32, 0x2a, 0x02, 0x01, 0x02,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x10, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_apiv2_proto_rawDescOnce sync.Once
	file_server_apiv2_proto_rawDescData = file_server_apiv2_proto_rawDesc
)

func file_server_apiv2_proto_rawDescGZIP() []byte {
	file_server_apiv2_proto_rawDescOnce.Do(func() {
		file_server_apiv2_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_apiv2_proto_rawDescData)
	})
	return file_server_apiv2_proto_rawDescData
}

var file_server_apiv2_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_server_apiv2_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_server_apiv2_proto_goTypes = []any{
	(UserSettingType)(0),                   // 0: protobuf.UserSettingType
	(NotificationTarget)(0),                // 1: protobuf.NotificationTarget
	(*HealthCheckResponse)(nil),            // 2: protobuf.HealthCheckResponse
	(*User)(nil),                           // 3: protobuf.User
	(*UserSetting)(nil),                    // 4: protobuf.UserSetting
	(*UpdateUserSettingsRequest)(nil),      // 5: protobuf.UpdateUserSettingsRequest
	(*ResetPasswordRequest)(nil),           // 6: protobuf.ResetPasswordRequest
	(*GetUserResponse)(nil),                // 7: protobuf.GetUserResponse
	(*UpdateUserSettingsResponse)(nil),     // 8: protobuf.UpdateUserSettingsResponse
	(*ResetPasswordResponse)(nil),          // 9: protobuf.ResetPasswordResponse
	(*ExportPersonalDataResponse)(nil),     // 10: protobuf.ExportPersonalDataResponse
	(*Enrollment)(nil),                     // 11: protobuf.Enrollment
	(*VideoView)(nil),                      // 12: protobuf.VideoView
	(*Chat)(nil),                           // 13: protobuf.Chat
	(*Bookmark)(nil),                       // 14: protobuf.Bookmark
	(*GetBookmarksRequest)(nil),            // 15: protobuf.GetBookmarksRequest
	(*AddBookmarkRequest)(nil),             // 16: protobuf.AddBookmarkRequest
	(*UpdateBookmarkRequest)(nil),          // 17: protobuf.UpdateBookmarkRequest
	(*DeleteBookmarkRequest)(nil),          // 18: protobuf.DeleteBookmarkRequest
	(*GetBookmarksResponse)(nil),           // 19: protobuf.GetBookmarksResponse
	(*AddBookmarkResponse)(nil),            // 20: protobuf.AddBookmarkResponse
	(*UpdateBookmarkResponse)(nil),         // 21: protobuf.UpdateBookmarkResponse
	(*Course)(nil),                         // 22: protobuf.Course
	(*GetPublicCoursesRequest)(nil),        // 23: protobuf.GetPublicCoursesRequest
	(*GetCourseBySlugRequest)(nil),         // 24: protobuf.GetCourseBySlugRequest
	(*GetUserCoursesRequest)(nil),          // 25: protobuf.GetUserCoursesRequest
	(*GetPinForCourseRequest)(nil),         // 26: protobuf.GetPinForCourseRequest
	(*PinCourseRequest)(nil),               // 27: protobuf.PinCourseRequest
	(*GetLiveStreamsResponse)(nil),         // 28: protobuf.GetLiveStreamsResponse
	(*GetPublicCoursesResponse)(nil),       // 29: protobuf.GetPublicCoursesResponse
	(*GetCourseBySlugResponse)(nil),        // 30: protobuf.GetCourseBySlugResponse
	(*GetUserCoursesResponse)(nil),         // 31: protobuf.GetUserCoursesResponse
	(*GetPinnedCoursesResponse)(nil),       // 32: protobuf.GetPinnedCoursesResponse
	(*PinCourseResponse)(nil),              // 33: protobuf.PinCourseResponse
	(*GetPinForCourseResponse)(nil),        // 34: protobuf.GetPinForCourseResponse
	(*CourseStream)(nil),                   // 35: protobuf.CourseStream
	(*Semester)(nil),                       // 36: protobuf.Semester
	(*GetSemestersResponse)(nil),           // 37: protobuf.GetSemestersResponse
	(*Stream)(nil),                         // 38: protobuf.Stream
	(*Download)(nil),                       // 39: protobuf.Download
	(*Notification)(nil),                   // 40: protobuf.Notification
	(*ServerNotification)(nil),             // 41: protobuf.ServerNotification
	(*GetNotificationsResponse)(nil),       // 42: protobuf.GetNotificationsResponse
	(*GetServerNotificationsResponse)(nil), // 43: protobuf.GetServerNotificationsResponse
	(*LectureHall)(nil),                    // 44: protobuf.LectureHall
	(*CameraPreset)(nil),                   // 45: protobuf.CameraPreset
	(*timestamppb.Timestamp)(nil),          // 46: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                  // 47: google.protobuf.Empty
}
var file_server_apiv2_proto_depIdxs = []int32{
	22, // 0: protobuf.User.courses:type_name -> protobuf.Course
	22, // 1: protobuf.User.administered_courses:type_name -> protobuf.Course
	22, // 2: protobuf.User.pinned_courses:type_name -> protobuf.Course
	4,  // 3: protobuf.User.settings:type_name -> protobuf.UserSetting
	14, // 4: protobuf.User.bookmarks:type_name -> protobuf.Bookmark
	46, // 5: protobuf.User.created_at:type_name -> google.protobuf.Timestamp
	0,  // 6: protobuf.UserSetting.type:type_name -> protobuf.UserSettingType
	4,  // 7: protobuf.UpdateUserSettingsRequest.user_settings:type_name -> protobuf.UserSetting
	3,  // 8: protobuf.GetUserResponse.user:type_name -> protobuf.User
	4,  // 9: protobuf.UpdateUserSettingsResponse.user_settings:type_name -> protobuf.UserSetting
	3,  // 10: protobuf.ExportPersonalDataResponse.user_data:type_name -> protobuf.User
	11, // 11: protobuf.ExportPersonalDataResponse.enrollments:type_name -> protobuf.Enrollment
	12, // 12: protobuf.ExportPersonalDataResponse.video_views:type_name -> protobuf.VideoView
	13, // 13: protobuf.ExportPersonalDataResponse.chats:type_name -> protobuf.Chat
	46, // 14: protobuf.Chat.created_at:type_name -> google.protobuf.Timestamp
	14, // 15: protobuf.GetBookmarksResponse.bookmarks:type_name -> protobuf.Bookmark
	14, // 16: protobuf.AddBookmarkResponse.bookmark:type_name -> protobuf.Bookmark
	14, // 17: protobuf.UpdateBookmarkResponse.bookmark:type_name -> protobuf.Bookmark
	36, // 18: protobuf.Course.semester:type_name -> protobuf.Semester
	38, // 19: protobuf.Course.streams:type_name -> protobuf.Stream
	35, // 20: protobuf.GetLiveStreamsResponse.streams:type_name -> protobuf.CourseStream
	22, // 21: protobuf.GetPublicCoursesResponse.courses:type_name -> protobuf.Course
	22, // 22: protobuf.GetCourseBySlugResponse.course:type_name -> protobuf.Course
	22, // 23: protobuf.GetUserCoursesResponse.courses:type_name -> protobuf.Course
	22, // 24: protobuf.GetPinnedCoursesResponse.courses:type_name -> protobuf.Course
	22, // 25: protobuf.CourseStream.course:type_name -> protobuf.Course
	38, // 26: protobuf.CourseStream.stream:type_name -> protobuf.Stream
	44, // 27: protobuf.CourseStream.lecture_hall:type_name -> protobuf.LectureHall
	36, // 28: protobuf.GetSemestersResponse.current:type_name -> protobuf.Semester
	36, // 29: protobuf.GetSemestersResponse.semesters:type_name -> protobuf.Semester
	46, // 30: protobuf.Stream.start:type_name -> google.protobuf.Timestamp
	46, // 31: protobuf.Stream.end:type_name -> google.protobuf.Timestamp
	46, // 32: protobuf.Stream.live_now_timestamp:type_name -> google.protobuf.Timestamp
	39, // 33: protobuf.Stream.downloads:type_name -> protobuf.Download
	1,  // 34: protobuf.Notification.target:type_name -> protobuf.NotificationTarget
	46, // 35: protobuf.Notification.created_at:type_name -> google.protobuf.Timestamp
	46, // 36: protobuf.ServerNotification.start:type_name -> google.protobuf.Timestamp
	46, // 37: protobuf.ServerNotification.expires:type_name -> google.protobuf.Timestamp
	40, // 38: protobuf.GetNotificationsResponse.notifications:type_name -> protobuf.Notification
	41, // 39: protobuf.GetServerNotificationsResponse.server_notifications:type_name -> protobuf.ServerNotification
	45, // 40: protobuf.LectureHall.camera_presets:type_name -> protobuf.CameraPreset
	47, // 41: protobuf.API.healthCheck:input_type -> google.protobuf.Empty
	47, // 42: protobuf.API.getUser:input_type -> google.protobuf.Empty
	6,  // 43: protobuf.API.resetPassword:input_type -> protobuf.ResetPasswordRequest
	5,  // 44: protobuf.API.updateUserSettings:input_type -> protobuf.UpdateUserSettingsRequest
	47, // 45: protobuf.API.exportPersonalData:input_type -> google.protobuf.Empty
	47, // 46: protobuf.API.getSemesters:input_type -> google.protobuf.Empty
	47, // 47: protobuf.API.getLiveStreams:input_type -> google.protobuf.Empty
	23, // 48: protobuf.API.getPublicCourses:input_type -> protobuf.GetPublicCoursesRequest
	24, // 49: protobuf.API.getCourseBySlug:input_type -> protobuf.GetCourseBySlugRequest
	25, // 50: protobuf.API.getUserCourses:input_type -> protobuf.GetUserCoursesRequest
	47, // 51: protobuf.API.getPinnedCourses:input_type -> google.protobuf.Empty
	26, // 52: protobuf.API.GetPinForCourse:input_type -> protobuf.GetPinForCourseRequest
	27, // 53: protobuf.API.PinCourse:input_type -> protobuf.PinCourseRequest
	16, // 54: protobuf.API.AddBookmark:input_type -> protobuf.AddBookmarkRequest
	15, // 55: protobuf.API.GetBookmarks:input_type -> protobuf.GetBookmarksRequest
	17, // 56: protobuf.API.UpdateBookmark:input_type -> protobuf.UpdateBookmarkRequest
	18, // 57: protobuf.API.DeleteBookmark:input_type -> protobuf.DeleteBookmarkRequest
	47, // 58: protobuf.API.GetNotifications:input_type -> google.protobuf.Empty
	47, // 59: protobuf.API.GetServerNotifications:input_type -> google.protobuf.Empty
	2,  // 60: protobuf.API.healthCheck:output_type -> protobuf.HealthCheckResponse
	7,  // 61: protobuf.API.getUser:output_type -> protobuf.GetUserResponse
	9,  // 62: protobuf.API.resetPassword:output_type -> protobuf.ResetPasswordResponse
	8,  // 63: protobuf.API.updateUserSettings:output_type -> protobuf.UpdateUserSettingsResponse
	10, // 64: protobuf.API.exportPersonalData:output_type -> protobuf.ExportPersonalDataResponse
	37, // 65: protobuf.API.getSemesters:output_type -> protobuf.GetSemestersResponse
	28, // 66: protobuf.API.getLiveStreams:output_type -> protobuf.GetLiveStreamsResponse
	29, // 67: protobuf.API.getPublicCourses:output_type -> protobuf.GetPublicCoursesResponse
	30, // 68: protobuf.API.getCourseBySlug:output_type -> protobuf.GetCourseBySlugResponse
	31, // 69: protobuf.API.getUserCourses:output_type -> protobuf.GetUserCoursesResponse
	32, // 70: protobuf.API.getPinnedCourses:output_type -> protobuf.GetPinnedCoursesResponse
	34, // 71: protobuf.API.GetPinForCourse:output_type -> protobuf.GetPinForCourseResponse
	33, // 72: protobuf.API.PinCourse:output_type -> protobuf.PinCourseResponse
	20, // 73: protobuf.API.AddBookmark:output_type -> protobuf.AddBookmarkResponse
	19, // 74: protobuf.API.GetBookmarks:output_type -> protobuf.GetBookmarksResponse
	21, // 75: protobuf.API.UpdateBookmark:output_type -> protobuf.UpdateBookmarkResponse
	47, // 76: protobuf.API.DeleteBookmark:output_type -> google.protobuf.Empty
	42, // 77: protobuf.API.GetNotifications:output_type -> protobuf.GetNotificationsResponse
	43, // 78: protobuf.API.GetServerNotifications:output_type -> protobuf.GetServerNotificationsResponse
	60, // [60:79] is the sub-list for method output_type
	41, // [41:60] is the sub-list for method input_type
	41, // [41:41] is the sub-list for extension type_name
	41, // [41:41] is the sub-list for extension extendee
	0,  // [0:41] is the sub-list for field type_name
}

func init() { file_server_apiv2_proto_init() }
func file_server_apiv2_proto_init() {
	if File_server_apiv2_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_apiv2_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_apiv2_proto_goTypes,
		DependencyIndexes: file_server_apiv2_proto_depIdxs,
		EnumInfos:         file_server_apiv2_proto_enumTypes,
		MessageInfos:      file_server_apiv2_proto_msgTypes,
	}.Build()
	File_server_apiv2_proto = out.File
	file_server_apiv2_proto_rawDesc = nil
	file_server_apiv2_proto_goTypes = nil
	file_server_apiv2_proto_depIdxs = nil
}
